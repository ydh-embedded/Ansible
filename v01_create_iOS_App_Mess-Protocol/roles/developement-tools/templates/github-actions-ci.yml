# {{ app_name }} - CI/CD Pipeline
# Generated by Ansible iOS Generator v{{ script_version }}
# Date: {{ ansible_date_time.date }}

name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '{{ node_version }}'
  IONIC_VERSION: '{{ ionic_version }}'
  CAPACITOR_VERSION: '{{ capacitor_version }}'

jobs:
  # ================================
  # Code Quality & Linting
  # ================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install Dependencies
      run: |
        npm ci
        npm install -g @ionic/cli@latest
        
    {% if enable_quality %}
    - name: 🔍 Run ESLint
      run: npm run lint
      
    - name: 💅 Check Prettier Formatting
      run: npm run format:check
      
    - name: 🔧 TypeScript Type Check
      run: npx tsc --noEmit
      if: ${{ hashFiles('tsconfig.json') != '' }}
    {% endif %}
    
    - name: 📊 Code Complexity Analysis
      run: |
        npx complexity-report --format json --output complexity.json src/js/
        echo "Code complexity analysis completed"
      continue-on-error: true

  # ================================
  # Testing
  # ================================
  {% if enable_cicd %}
  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        node-version: [{{ node_version }}, 20]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📥 Install Dependencies
      run: |
        npm ci
        npm install -g @ionic/cli@latest
        
    - name: 🧪 Run Unit Tests
      run: npm test
      
    {% if enable_coverage %}
    - name: 📊 Generate Coverage Report
      run: npm run test:coverage
      
    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    {% endif %}
    
    - name: 🎯 Accessibility Tests
      run: |
        npx axe-cli http://localhost:8100 --exit
      continue-on-error: true
  {% endif %}

  # ================================
  # Build & Package
  # ================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: {% if enable_cicd %}[quality, test]{% else %}quality{% endif %}
    
    strategy:
      matrix:
        build-type: [development, production]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install Dependencies
      run: |
        npm ci
        npm install -g @ionic/cli@latest @capacitor/cli@latest
        
    - name: 🏗️ Build Web App (${{ matrix.build-type }})
      run: |
        if [ "${{ matrix.build-type }}" = "production" ]; then
          ionic build --prod
        else
          ionic build
        fi
        
    {% if enable_build %}
    - name: 📦 Bundle Analysis
      run: |
        npx webpack-bundle-analyzer dist/static/js/*.js --report --mode static --report-filename bundle-report.html
      if: matrix.build-type == 'production'
      continue-on-error: true
    {% endif %}
    
    - name: 📁 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.build-type }}
        path: |
          dist/
          www/
        retention-days: 7

  # ================================
  # Mobile Platform Builds
  # ================================
  mobile-build:
    name: 📱 Mobile Build
    runs-on: ${{ matrix.os }}
    needs: build
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: ios
          - os: ubuntu-latest
            platform: android
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-production
        
    - name: 📥 Install Dependencies
      run: |
        npm ci
        npm install -g @ionic/cli@latest @capacitor/cli@latest
    
    # iOS Specific Setup
    - name: 🍎 Setup iOS Environment
      if: matrix.platform == 'ios'
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        xcrun simctl list
        
    # Android Specific Setup  
    - name: 🤖 Setup Android Environment
      if: matrix.platform == 'android'
      uses: android-actions/setup-android@v2
      with:
        api-level: 33
        build-tools: 33.0.2
        
    - name: 📱 Add Platform
      run: ionic cap add ${{ matrix.platform }}
      
    - name: 🔄 Sync Platform
      run: ionic cap sync ${{ matrix.platform }}
      
    - name: 🏗️ Build ${{ matrix.platform }}
      run: |
        if [ "${{ matrix.platform }}" = "ios" ]; then
          cd ios && xcodebuild -workspace App/App.xcworkspace -scheme App -configuration Release -destination generic/platform=iOS build
        else
          cd android && ./gradlew assembleRelease
        fi
      
    - name: 📁 Upload Mobile Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mobile-${{ matrix.platform }}
        path: |
          ios/App/build/
          android/app/build/outputs/
        retention-days: 30

  # ================================
  # Security Scanning
  # ================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Run npm audit
      run: |
        npm audit --audit-level moderate
      continue-on-error: true
      
    - name: 🔒 Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
    - name: 🛡️ CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ================================
  # Performance Testing
  # ================================
  {% if enable_analytics %}
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-production
        
    - name: 🚀 Start Web Server
      run: |
        npx http-server dist -p 8080 &
        sleep 5
        
    - name: ⚡ Lighthouse Performance Audit
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          http://localhost:8080
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: 📊 Performance Budget Check
      run: |
        echo "Checking performance budgets..."
        # Add custom performance checks here
  {% endif %}

  # ================================
  # Deployment
  # ================================
  {% if enable_auto_deploy %}
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build, {% if enable_cicd %}test, {% endif %}security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://{{ github_username }}.github.io/{{ project_name }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-production
        
    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        cname: {{ project_name | lower }}.{{ github_username }}.dev
        
    - name: 📧 Deployment Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: '🚀 {{ app_name }} deployed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
  {% endif %}

  # ================================
  # Notifications & Reporting
  # ================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [build, {% if enable_cicd %}test, {% endif %}security{% if enable_auto_deploy %}, deploy{% endif %}]
    if: always()
    
    steps:
    - name: 📊 Workflow Summary
      run: |
        echo "## 📊 Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: {{ app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: {{ version_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
    - name: 📧 Teams Notification
      uses: skitionek/notify-microsoft-teams@master
      if: failure()
      with:
        webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
        overwrite: |
          {
            "text": "❌ {{ app_name }} CI/CD Pipeline Failed",
            "sections": [{
              "activityTitle": "Build Failure",
              "activitySubtitle": "Branch: ${{ github.ref_name }}",
              "facts": [{
                "name": "Repository",
                "value": "${{ github.repository }}"
              }, {
                "name": "Commit",
                "value": "${{ github.sha }}"
              }]
            }]
          }